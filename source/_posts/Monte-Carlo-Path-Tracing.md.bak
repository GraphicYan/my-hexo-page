---
title: 蒙特卡洛路径追踪
layout: Monte Carlo Path Tracing
date: 2021/04/09 20:46:25
toc: true
---

<a name="XFBgD"></a>
## **1 蒙特卡洛积分(Monte Carlo Integration)**
首先让我们先搞懂蒙特卡洛路径追踪的这个“蒙特卡洛”的前缀到底指什么。<br />**蒙特卡洛积分的目的：**当一个积分很难通过解析的方式得到答案的时候可以通过蒙特卡洛的方式近似得到积分结果，如下图所示：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958584178-89b2765e-1f77-4e4e-9b66-27a844d88b6f.jpeg#from=paste&height=465&id=ua3e5c3b0&margin=%5Bobject%20Object%5D&originHeight=465&originWidth=972&originalType=url&status=done&style=none&taskId=u93f586f2-91f5-43f6-adc0-0be45d6f92f&width=972)<br />显然对于这样一个函数，很难去用一个数学式子去表示，因此无法用一般解析的方法直接求得积分值，而这时候就可以采用蒙特卡洛的思想了。<br />**蒙特卡洛积分的原理及做法：**对函数值进行多次采样求均值作为积分值的近似<br />该做法十分容易理解，想象一下如果对上图这个函数值进行**均匀采样**的话，其实就相当于将整个积分面积切成了许许多多个长方形，然后将这些小长方形的面积全部加起来。没错，该做法其实就与黎曼积分的想法几乎一致。但蒙特卡洛积分更加的general，因为它可以指定一个分布来对被积分的值进行采样，定义如下：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958584188-655eee6a-7eb3-4b68-9dff-944a30d7f4df.jpeg#from=paste&height=312&id=uccb8931e&margin=%5Bobject%20Object%5D&originHeight=312&originWidth=720&originalType=url&status=done&style=none&taskId=ueb8a0d57-effa-4d00-aab3-93ac40945a9&width=720)<br />如图所示，我们希望求出一个函数![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958584041-44790b00-4777-4ce6-85d0-3a59abecaa8d.svg#from=paste&height=26&id=u97b99c16&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=40&originalType=url&status=done&style=none&taskId=u1f0743ff-df22-4776-bed7-48f753a5f65&width=40)在积分域![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958584044-3aec6785-dd76-4243-a994-e25e7588a47b.svg#from=paste&height=26&id=ufa7fff45&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=41&originalType=url&status=done&style=none&taskId=u746a5df6-81dc-4365-b71f-f25379a15fe&width=41)上的积分值，选定一个采样的分布![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958584044-33fe8ab5-4fe5-49b5-9070-4cd388145c3d.svg#from=paste&height=26&id=u0c5b427c&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=40&originalType=url&status=done&style=none&taskId=u96cf039e-f386-421f-8f43-ece5d2cf2ec&width=40)，通过对该分布来进行多次的函数值采样，最后估计的值如图中最下方式子所示。<br />这里对该式子进行一个简单的推导。相信大家都知道，求均值的做法其实也是对期望的逼近，因此：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958585611-39db4f65-20ad-4616-a8b8-acc3e9ee9fe5.svg#from=paste&height=75&id=udbaa2c00&margin=%5Bobject%20Object%5D&originHeight=75&originWidth=675&originalType=url&status=done&style=none&taskId=ua49d2c89-0275-46b1-8647-194a1ae23c3&width=675)<br />那么对于这样一个服从某一分布的期望的计算套公式直接计算得：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958585610-990b19c9-8d0c-40ca-840b-a91fc8daca8f.svg#from=paste&height=128&id=ub94060e4&margin=%5Bobject%20Object%5D&originHeight=128&originWidth=675&originalType=url&status=done&style=none&taskId=uc4675539-0a13-4c8e-8dbd-04fa718f99a&width=675)<br />通过以上推导即可明白蒙特卡洛的近似正是对积分值的一个无偏估计。<br />但在本文中为了方便，所有的采样都使用均匀采样，因此很容易推出：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958585805-e7a8d95f-31b5-45b2-913d-eefbf9ebce3a.jpeg#from=paste&height=419&id=u6e859c29&margin=%5Bobject%20Object%5D&originHeight=419&originWidth=981&originalType=url&status=done&style=none&taskId=u190db0df-b13e-48af-8e2a-2e09451a2c8&width=981)<br />因此，**蒙特卡洛在此来说就是一个帮助求得困难积分值的方法**。
<a name="FEDrv"></a>
## **2 蒙特卡洛路径追踪(Monte Carlo Path Tracing)**
回顾一下上篇文章中所得到的渲染方程：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958585615-b8b68875-d403-4c58-b3e9-9a79ea4eaad0.svg#from=paste&height=60&id=u7d57ee44&margin=%5Bobject%20Object%5D&originHeight=60&originWidth=675&originalType=url&status=done&style=none&taskId=u4560d234-b5ec-41e6-b74b-5255bcdcae6&width=675)<br />要想解出以上方程的解主要有两个难点：

1. 积分的计算
2. 递归形式

而解决这些难点自然就要利用上节中所提到的蒙特卡洛积分方法了。<br />在进入具体计算之前，对渲染方程做出一点小修改，即舍弃一下自发光项(因为除了光源其他物体不会发光), 以方便进行计算推导：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958585604-4d5f4a54-bc48-4fbe-8345-7354f324cc21.svg#from=paste&height=60&id=u28e55cc7&margin=%5Bobject%20Object%5D&originHeight=60&originWidth=675&originalType=url&status=done&style=none&taskId=u400eb71e-8b34-423f-8cde-6b275dcb47d&width=675)<br />从具体例子出发，首先仅仅考虑直接光照：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958586052-4a9d57a7-80f4-4e58-a2da-8ab4fc4160f5.jpeg#from=paste&height=455&id=u83c398d7&margin=%5Bobject%20Object%5D&originHeight=455&originWidth=834&originalType=url&status=done&style=none&taskId=u4d8aec06-8fb1-4915-b64c-2737a3f0154&width=834)<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958585944-b2dd1087-c27c-4ce1-bcff-51f226daf0a4.svg#from=paste&height=60&id=u7861ff52&margin=%5Bobject%20Object%5D&originHeight=60&originWidth=675&originalType=url&status=done&style=none&taskId=u67322ac1-b840-4ba7-9e1c-9ddd4262adc&width=675)<br />再次观察该修改过之后的方程其实就只是一个单纯的积分计算了，其物理含义为着色点p到摄像机或人眼的Radiance值。<br />回想第一章所提的，对于一个困难积分只要选定一个被积分变量的采样分布即可通过蒙特卡洛的方法得到积分结果的近似值，而此时的被积分值为![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958585948-a369a736-1653-4203-9ae4-ee93a8d1c7e4.svg#from=paste&height=18&id=ud25e40b1&margin=%5Bobject%20Object%5D&originHeight=18&originWidth=20&originalType=url&status=done&style=none&taskId=u1bb8ac53-ef49-428b-b9de-86c46d9bdb8&width=20)，选定![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958585973-4282f6de-aab1-43ba-b32a-b06444aa060d.svg#from=paste&height=26&id=u25d2e54f&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=95&originalType=url&status=done&style=none&taskId=u1d86738d-455c-4fa2-a8d5-54aa2d7399d&width=95)，不难得出积分近似结果如下：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958586123-68a57491-e2ef-4f89-b802-02784f6be19d.svg#from=paste&height=75&id=u57b847cd&margin=%5Bobject%20Object%5D&originHeight=75&originWidth=675&originalType=url&status=done&style=none&taskId=u96b60ec5-dee4-475f-a972-9f0e87c2e42&width=675)<br />正如一开始所说，先单独考虑直接光照，因此只有当采样的方向![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958586185-fd3a2bae-b1c9-4392-9219-483f98d6faaa.svg#from=paste&height=18&id=u09805f98&margin=%5Bobject%20Object%5D&originHeight=18&originWidth=20&originalType=url&status=done&style=none&taskId=u233f9e3a-a00a-434a-869f-13e71e71245&width=20)击中光源的时候，光源才会对该着色点有贡献，计算伪代码如下：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958586260-fb74995a-fa0d-4345-abdf-2b3d60526c10.jpeg#from=paste&height=301&id=u061e096e&margin=%5Bobject%20Object%5D&originHeight=301&originWidth=720&originalType=url&status=done&style=none&taskId=u53fea0f1-dc22-4521-87f8-ba3ab23d0ce&width=720)<br />显而易见的，单独仅仅考虑直接光照自然是不够的，还需要间接光照，即当采样的![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958586330-5dc301d8-9bc4-4c41-81b2-762aa5b33baf.svg#from=paste&height=18&id=uc0e63b7a&margin=%5Bobject%20Object%5D&originHeight=18&originWidth=20&originalType=url&status=done&style=none&taskId=u79fa320c-2665-4350-9b3c-2ae2a0d1986&width=20)方向碰撞到了别的物体，如下图所示：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958586412-a6890a60-3792-4866-b3c8-673010aa9f91.jpeg#from=paste&height=511&id=ucbc0f9ea&margin=%5Bobject%20Object%5D&originHeight=511&originWidth=1003&originalType=url&status=done&style=none&taskId=u0430062b-13cc-4619-86e6-43a80197f01&width=1003)<br />此时采样的光线碰撞到了另一个物体的Q点，那么该条路径对着色点P的贡献是多少呢？自然是在点Q的直接光照再乘上反射到该方向上的百分比了！显然这是一个类似光线追踪的递归过程，不同在于该方法通过对光线方向的采样从而找出一条条可行的路径，这也正是为什么叫路径追踪的原因，伪代码如下：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958586465-46c9903f-a03f-4b76-b7d8-6aad2d835080.jpeg#from=paste&height=532&id=uf1411439&margin=%5Bobject%20Object%5D&originHeight=532&originWidth=1018&originalType=url&status=done&style=none&taskId=u08e87e4c-d19a-4c0c-9d76-f8279631bba&width=1018)<br />至此，我们成功通过蒙特卡洛的方式解出了渲染方程的积分值，也通过考虑直接光照与间接光照解决了递归的问题。但该方法至此有一个非常致命的缺陷：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958586472-4c8b606b-946f-44f3-be97-8f0f29771709.jpeg#from=paste&height=347&id=u718cad7f&margin=%5Bobject%20Object%5D&originHeight=347&originWidth=720&originalType=url&status=done&style=none&taskId=ud2fa0238-8810-4a05-b762-70e01488c7c&width=720)<br />我们通过每次对光线方向的采样从而解出方程，假设每次采样100条，那么从人眼出发的第一次采样就是100条，在进行第二次反射之后就是10000条，依次类推，反射越多次光线数量便会爆炸增长，计算量会无法负担，那么如何才能使得光线数量不爆炸增长呢？**唯有每次只采样一个方向！N=1**<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958586628-93a8858e-63ce-475e-81e8-3de6663544e1.jpeg#from=paste&height=260&id=uf994797b&margin=%5Bobject%20Object%5D&originHeight=260&originWidth=720&originalType=url&status=done&style=none&taskId=u687dadf2-c890-422f-aa63-87a15c745fc&width=720)<br />每次如果只采样一个方向那么所带来的问题也是显而易见的，积分计算的结果会非常的noisy，虽然蒙特卡洛积分是无偏估计，但样本越少显然偏差越大。但该问题很好解决，如果每次只去寻找一条路径结果不好，那么重复多次寻找到多条路径，将多条路径的结果求得平均即可！如下图所示：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958586633-b70981be-8f9d-4c9b-8a73-894c3962e6db.jpeg#from=paste&height=350&id=ufae6dd78&margin=%5Bobject%20Object%5D&originHeight=350&originWidth=720&originalType=url&status=done&style=none&taskId=ua2966784-9448-47a8-bdde-c4f3842083b&width=720)<br />改良之后的Path Tracing伪代码如下：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958586875-6f2947a6-af62-412e-8e68-0a18803e42a4.jpeg#from=paste&height=385&id=ud33a0200&margin=%5Bobject%20Object%5D&originHeight=385&originWidth=962&originalType=url&status=done&style=none&taskId=u0e8883de-cdad-4b4d-b6a3-444df9d8f18&width=962)<br />通过对经过像素的光线重复采样，每次在反射的时候只按分布随机选取一个方向，解决了只对经过像素的光线采样一次，而对反射光线按分布采样多次所导致的光线爆炸问题。<br />那么现在所有的问题都解决了吗？还没有！因为shade函数的递归没有出口，永远不会停下。 但这里并不没有采用类似光线追踪当中设定反射深度显示的给出递归出口的方法，而是非常精妙的采用了**俄罗斯轮盘赌(Russian Roulette)**。<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958586915-ca16e0a3-9475-47d0-b71e-c66c5dfb8f31.jpeg#from=paste&height=535&id=ub3204d22&margin=%5Bobject%20Object%5D&originHeight=535&originWidth=1002&originalType=url&status=done&style=none&taskId=ubae95d8a-984f-4bab-9649-bcf01c63816&width=1002)<br />给你一把左轮，两发子弹，你不知道哪一发会真正的射出子弹，因此拿这把左轮射自己，你有4/6的概率活下来，这就是俄罗斯轮盘赌的概念。<br />将其应用在路径追踪当中，首先设定一个概率![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958586775-47d3bbc0-856e-417f-a5eb-53b47c666a77.svg#from=paste&height=20&id=uc35d1ad2&margin=%5Bobject%20Object%5D&originHeight=20&originWidth=16&originalType=url&status=done&style=none&taskId=u31c19752-1d8c-4a30-99bb-855e744f6b6&width=16), 有P的概率光线会继续递归并设置返回值为![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958586915-5761d65e-370d-4d23-8173-574b9da30320.svg#from=paste&height=26&id=u35f3531e&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=50&originalType=url&status=done&style=none&taskId=ubdee8569-905e-4074-a91c-70ad09e84c0&width=50)，有![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958586920-eefa9739-8d76-4442-b326-da550b30f593.svg#from=paste&height=21&id=u75b37006&margin=%5Bobject%20Object%5D&originHeight=21&originWidth=52&originalType=url&status=done&style=none&taskId=u21af54ad-560f-4489-84fb-31ab02774b9&width=52)的概率光线停止递归，并返回0。这样巧妙的设定之下光线一定会在某次反射之后停止递归，并且计算的结果依然是无偏的，因为Radiance的期望不变，证明如下：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958587279-1350b72b-7078-4755-8bde-2e3b777e3169.svg#from=paste&height=45&id=ueca43bce&margin=%5Bobject%20Object%5D&originHeight=45&originWidth=675&originalType=url&status=done&style=none&taskId=u4565a796-fd58-49d0-8955-26b0bfdf936&width=675)<br />shade函数的伪代码变更如下，使得可以停止递归了：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958587279-17835589-427a-46cc-b063-8bd4b64e50fd.jpeg#from=paste&height=391&id=ub1b4a58e&margin=%5Bobject%20Object%5D&originHeight=391&originWidth=720&originalType=url&status=done&style=none&taskId=u2ae9124f-1523-440f-9b5f-f0eb4076bdb&width=720)<br />至此，我们的路径追踪算法已经完成大半，只差最后一个小问题！现在的路径追踪效率非常的低下，如图所示：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958587321-f0158e74-be0e-47f1-b576-7481951057a5.jpeg#from=paste&height=366&id=u36b7dc30&margin=%5Bobject%20Object%5D&originHeight=366&originWidth=1063&originalType=url&status=done&style=none&taskId=uc0e727d0-a1a1-4575-9fd8-e270179481f&width=1063)<br />在每次计算直接光照的时候，通过均匀采样任选一个方向，但很少会的光线可以hit光源，尤其当光源较小的时候，这种现象越明显，大量采样的光线都被浪费了。<br />因此在计算直接光照的时候改进为**直接对光源进行采样！**这样所有采样的光线都一定会击中光源(如果中间没有别的物体)，没有光线再会被浪费了。假设光源的面积为A，那么对光源进行采样的![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958587252-6a959f37-6219-4d82-ac10-201b37b3aa5c.svg#from=paste&height=26&id=uea2f183c&margin=%5Bobject%20Object%5D&originHeight=26&originWidth=98&originalType=url&status=done&style=none&taskId=ud30ce8f9-d074-4cd4-bd08-d4f46fd0919&width=98)(因为![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958587299-37e186d4-81cb-424a-9a6d-ba2da6da322c.svg#from=paste&height=51&id=udc99f34b&margin=%5Bobject%20Object%5D&originHeight=51&originWidth=121&originalType=url&status=done&style=none&taskId=ucd52a7a8-ddfd-42fa-a2f3-0994d522c17&width=121))，但原始的渲染方程：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958587691-40c5aa1a-7bc4-491d-928a-3d8b0ce45449.svg#from=paste&height=60&id=u6c487aaf&margin=%5Bobject%20Object%5D&originHeight=60&originWidth=675&originalType=url&status=done&style=none&taskId=u58d927ac-edf0-4b53-a01d-95e5b0d942b&width=675)<br />很明显是对光线方向![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958587593-2f0df7ba-7753-453e-844e-baabb5460f36.svg#from=paste&height=18&id=u0183de77&margin=%5Bobject%20Object%5D&originHeight=18&originWidth=20&originalType=url&status=done&style=none&taskId=uabc2d9dc-836c-4ee2-ac06-4c194102f18&width=20)进行积分的，如果想要对光源进行采样的并依然使用蒙题卡洛的方法，那么一定要将其修改为对光源面积 dA的积分，换言之就是需要找到dA与d![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958587593-cfe98c07-e620-4a75-942c-a303582962ec.svg#from=paste&height=18&id=ub1bfc2af&margin=%5Bobject%20Object%5D&originHeight=18&originWidth=20&originalType=url&status=done&style=none&taskId=uc23ec23d-5020-4077-bf79-a7edb582a1b&width=20)的关系即可。如下图所示：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958587722-b806de7b-f74e-4949-b3f0-635de2ee238a.jpeg#from=paste&height=705&id=u9c4b2678&margin=%5Bobject%20Object%5D&originHeight=705&originWidth=1064&originalType=url&status=done&style=none&taskId=u58c884a0-9b6a-473a-bd2d-6a464030a49&width=1064)<br />关系式中的![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958587699-2fbceb2d-5de2-4a85-be26-42dca0abf2b6.svg#from=paste&height=23&id=u18d56fbf&margin=%5Bobject%20Object%5D&originHeight=23&originWidth=45&originalType=url&status=done&style=none&taskId=u74bc15c0-1ef0-4212-b185-53dfb03c3ad&width=45)是为了计算出光源上微分面积元正对半球的面积，之后再按照立体角的定义![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958587837-de52c72c-d161-43dd-bc25-4d2a500f9c6e.svg#from=paste&height=51&id=ud7021b99&margin=%5Bobject%20Object%5D&originHeight=51&originWidth=87&originalType=url&status=done&style=none&taskId=u45be2643-27de-4ae8-9ca4-d286f773d76&width=87)，除以着色点x与光源采样点x'距离的平方即可。于是根据图中二者的关系可将渲染方程改写如下：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958587988-ed733c2a-7308-4541-8413-63475c82d64a.svg#from=paste&height=122&id=u280fed83&margin=%5Bobject%20Object%5D&originHeight=122&originWidth=675&originalType=url&status=done&style=none&taskId=u85bcae76-9ee3-452d-808b-be7ce1e9da8&width=675)<br />这样便成功从![](https://intranetproxy.alipay.com/skylark/lark/0/2021/svg/223200/1617958587947-cb8e2aa8-310e-4ef6-8539-7df85f78568a.svg#from=paste&height=18&id=u154f196b&margin=%5Bobject%20Object%5D&originHeight=18&originWidth=20&originalType=url&status=done&style=none&taskId=u1f791c47-e17b-4812-af88-3a4768465ac&width=20)积分转到了对光源面积A的积分，就可以利用蒙特卡洛的方法对光源进行采样从而计算直接光照的积分值了，对于间接光照，依然采用先前的方法进行光线方向的均匀采样。最终伪代码如下，分直接光照和间接光照两部分计算：<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958587998-00286583-6210-4f99-ad5a-1c9c90f6e893.jpeg#from=paste&height=653&id=ud4f01ea3&margin=%5Bobject%20Object%5D&originHeight=653&originWidth=1070&originalType=url&status=done&style=none&taskId=u1e2ecb7d-11e3-422c-8d04-781b7c669ce&width=1070)<br />tips:计算直接光照的时候还需要判断光源与着色点之间是否有物体遮挡，该做法也很简单，只需从着色点x向光源采样点x’发出一条检测光线判断是否与光源之外的物体相交即可，如图所示:<br />![](https://intranetproxy.alipay.com/skylark/lark/0/2021/jpeg/223200/1617958588094-6a4314fa-0751-4606-8156-4551dc366cbc.jpeg#from=paste&height=438&id=ua436dde9&margin=%5Bobject%20Object%5D&originHeight=438&originWidth=720&originalType=url&status=done&style=none&taskId=u92a0cd88-92e8-4d99-a882-0f803b9bc6f&width=720)
